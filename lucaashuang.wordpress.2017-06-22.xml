<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-06-22 02:44"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>lucaashuang</title>
<link>https://lucaashuang.wordpress.com</link>
<description>iOS, Objective-C, SWIFT, COCOA</description>
<pubDate>Thu, 22 Jun 2017 02:44:33 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://lucaashuang.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>xhuang0802</wp:author_login>
  <wp:author_email>xhuang0802@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[xhuang0802]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>lucaashuang</title>
		<link>https://lucaashuang.wordpress.com</link>
	</image>
	<item>
  <title>About Lucaaas Huang</title>
  <link>https://lucaashuang.wordpress.com/about/</link>
  <pubDate>Sat, 11 Jul 2015 06:33:46 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">http://lucaashuang.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>Being passionate on software development since high school</li>
	<li>Four years iOS experience development for personal or enterprise applications</li>
	<li>Love Swift since it launched from 2014</li>
	<li>Being obsessed with seeing great Mac applications to improve Apple ecosystem</li>
	<li>Developing backend application is also my another career pursuit and would like to acquire backends' skills from any ways</li>
	<li>Care about education and health care</li>
</ul>
Contact:  <a href="mailto:xhuang0802@gmail.com">xhuang0802@gmail.com</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2015-07-11 06:33:46</wp:post_date>
  <wp:post_date_gmt>2015-07-11 06:33:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>MY WORKS</title>
  <link>https://lucaashuang.wordpress.com/my-works-2/</link>
  <pubDate>Sun, 12 Jul 2015 19:18:14 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">https://lucaashuang.wordpress.com/?page_id=16</guid>
  <description/>
  <content:encoded><![CDATA[EVERYTHING STARTS WITH A "FIRST"!!!
<ul>
	<li><a href="https://itunes.apple.com/us/app/mijana/id685012081?mt=8" target="_blank">Mijana</a>: First app I have ever worked on</li>
	<li><a href="https://itunes.apple.com/us/app/mood-meter-building-your-emotional/id825930113" target="_blank">Mood Meter</a>: First app I worked on when I became internship in RC officially</li>
	<li><a href="https://itunes.apple.com/us/app/smarter-product-finder/id952790366?mt=8" target="_blank">Smarter Product Finder</a>: First app I worked on by myself</li>
	<li><a href="https://itunes.apple.com/us/app/birdie-eye/id667835790?mt=8" target="_blank">Birdie Eye</a>: First app that I refactored almost 70% of its codes due to design changes</li>
	<li>ROP: First enterprise app I worked on</li>
	<li><a href="https://www.moback.com/docs/#/overview" target="_blank">moBack iOS SDK</a>: First SDK of my career</li>
	<li><a href="https://itunes.apple.com/gm/app/ratemylunch/id970222509?mt=8" target="_blank">RateMyLunch</a>: First app developed by moBack iOS SDK</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2015-07-12 19:18:14</wp:post_date>
  <wp:post_date_gmt>2015-07-12 19:18:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-works-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Nitty gritty hints for iOS development</title>
  <link>https://lucaashuang.wordpress.com/2015/07/18/nitty-gritty-hints-for-ios-development/</link>
  <pubDate>Sat, 18 Jul 2015 00:36:59 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">https://lucaashuang.wordpress.com/?p=19</guid>
  <description/>
  <content:encoded><![CDATA[I have been in iOS development for two full years and there are something you might want to keep in mind for making your app easier to <strong>DEVELOP </strong>and<strong> EXTEND</strong>. This post will be updated if there are many more in the future.
<ul>
	<li>General:
<ul>
	<li>Organize your file structure under actual folder as well as Project Navigator in Xcode. Your coworkers will find it easier to understand the code responsibility.</li>
	<li>Do spend some time to research whether some complex functionalities have convenient and meaningful third-parties to accelerate development process but DO NOT overuse or use less reliable frameworks.</li>
	<li>Take advantage of code snippets provided by Xcode and create your own convenient code snippets for future development. Your own codebase is highly recommended!</li>
</ul>
</li>
	<li>UI-Layout:
<ul>
	<li>If you use a storyboard, try to split view controllers based on modules or responsibilities. Like, you can move all view controllers belonging to user management to a specific area etc. Also, including XIB files is accepted if it will make the project modular. You can split it into multi storyboards from iOS9.</li>
	<li>Use <em>UIViewController</em> with <em>UITableView</em> instead of <em>UITableViewController</em> so that you have the flexibility to change UI elements inside this <em>UIViewController</em>. There has a great article talking about this issue: <a href="https://www.objc.io/issues/1-view-controllers/containment-view-controller/" target="_blank">Containment-View-Controller</a></li>
</ul>
</li>
	<li> Coding:
<ul>
	<li>The naming convention has to be unified or taken good care in a specific manner so that your coworkers know what it does and its purpose.</li>
	<li>Create a file to handle key string and declare it as constant so that you can take advantage of auto-completion and avoid the typo. For instances, reuseIdentifier or segue identifier etc.</li>
	<li>Try to create your model classes just like creating library's APIs and consider critically what you should expose or not. For example, take advantage of public and private header declaration.</li>
</ul>
</li>
	<li>Codes management:
<ul>
	<li>Get used to composing useful comments as well as git comments and sticking with clean coding style like the one from <a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank">NYTimes Objective-C Style Guide</a>.</li>
	<li>Always filter out unnecessary lines inside a file or files when committing like <em>.xcuserstate</em>, <em>.xcbkptlist </em>because your coworkers do not necessarily to have these files.</li>
	<li>Take advantage of GUI tool like <a href="https://www.sourcetreeapp.com/" target="_blank">SourceTree</a> if you are not familiar with git command</li>
</ul>
</li>
</ul>
These hints are my personal experience that will probably help you to reduce your time in iOS development. I have tried to finish a client app for two days ONLY. Hopefully, this will be helpful. Leave comments below and let's share what other iOS developers think.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2015-07-18 00:36:59</wp:post_date>
  <wp:post_date_gmt>2015-07-18 00:36:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nitty-gritty-hints-for-ios-development</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=255005732&stype=M&topic=6027968833229180928&type=U&a=n8mk]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12832785645]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:11867323;s:56:"https://twitter.com/focushuang/status/622203135918870528";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817520</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867323</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[focushuang]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817531</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867334</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Swift or Objective-C from project standpoint?</title>
  <link>https://lucaashuang.wordpress.com/2016/01/25/swift-or-objective-c/</link>
  <pubDate>Mon, 25 Jan 2016 17:00:39 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">https://lucaashuang.wordpress.com/?p=76</guid>
  <description/>
  <content:encoded><![CDATA[I have been asked by iOS folks, interviewers even clients about my perspective of using Swift in projects now. I got credits simply because I have been rolling in iOS development for four years. I am glad of being able to give some insides.

Let's get started with my Swift experience. Well, I worked on two projects written in pure Swift. That's enough to get me to learn the syntax of Swift and its characteristic. Besides, I also mixed and matched Swift in couples Objective-C projects that were launched in App Store successfully. That gets me understand the principle of how Swift and Objective-C work together. I might not be capable of discussing too many technical details behind these two languages. But, I will share with you why I started using Swift from project and programming language standpoint since the first version. Oh yeah, I think mixing two of them should be the best at least for the next three years.
<h2>Objective-C is stable</h2>
First of all, <a href="https://en.wikipedia.org/wiki/Objective-C" target="_blank">Objective-C</a> is stable with no doubt. It's 33 years old now! I think nobody will say Swift is better than that from the stability? Comment below if so and let's find out. The evolution of Objective-C is sort of slow. Apple introduced Objective-C 2.0 in 2007. Why? Because it's already that stable. Why bother to change? It just got changed if necessary. Whereas Swift got changes constantly starting from August 2014, the time when Swift 1.0 got released. Newer beta Swift does not seem to stop coming out after Swift 2 got released in WWDC 2015. It can tell that Swift is relatively unstable compared to our legend. Purely using it in a project might be problematic and I don't think engineers will release their software using a beta version of Swift? It seems that Objective-C is more reliable to use for consumer-facing products.
<h2>Swift is Swifty</h2>
Undeniable, Swift is much better than Objective-C. From the syntax perspective, it's cleaner, less typing and modern. For example, you don't need @ symbol anymore. That's just for Objective-C differentiating keywords and types from C language. Besides, you don't need to be in the bracket hell. By the way, you don't need the semicolon either. Isn't it such a good way to change the developer world? Furthermore, Swift is a much safer language. Swift is less likely to crash in runtime due to the introduction of Optional Type. There are a lot of improper use of language and API call can be detected by compiler level. That's why Swift is also known as a static programming language. Anyway, there are a lot more reasons to indicate that Swift is going to be huge in the future like its speed. In short, you just can't leave Swift behind.

Being a developer, it's great if you put Swift into your toolchain. Believe it or not, Swift is open source now. Check this out: <a href="https://swift.org/" target="_blank">Swift.org</a>. This is going to a historical move. Now, it's even possible to run Swift in Windows compilers, TV and variety of embedded systems. Sound familiar? Yes, that's what Java language is trying to fit into. Presumably, Swift is going to be a new generation of <a href="http://java.com/en/download/whatis_java.jsp" target="_blank">Java</a>. Oh man, Apple is ambitious!
<h2>Adapt it!</h2>
Swift for me or most of us is still mysterious world. I am not saying that Objective-C is solid and we should stick with it. Of course, I don't suggest all of us to go for Swift insanely. As time goes by, one better thing is going to replace another because of evolution. We all do. Sometimes, things are too tough to change. What should we do then? We don't adopt but adapting from now on.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2016-01-25 17:00:39</wp:post_date>
  <wp:post_date_gmt>2016-01-25 17:00:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>swift-or-objective-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[swift-or-objective-c-from-project-standpoint]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=255005732&stype=M&topic=6097453883259379712&type=U&a=fWpj]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19113865442]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:11867323;s:56:"https://twitter.com/focushuang/status/691688186263646209";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817520</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867323</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[focushuang]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817531</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867334</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What is MVC in practice?</title>
  <link>https://lucaashuang.wordpress.com/2016/03/30/mvc-ios/</link>
  <pubDate>Wed, 30 Mar 2016 03:00:55 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">https://lucaashuang.wordpress.com/?p=229</guid>
  <description/>
  <content:encoded><![CDATA[What is MVC in iOS? - is one of the first questions that an interviewer might ask a potential iOS developer. MVC is one of the easiest concepts to comprehend. <span style="line-height:1.7;">Hence, I will not be introducing here. Instead, I'll be touching on what MVC really is in practice.</span>
<h2>MVC in reality</h2>
Although an easy concept to grasp, a lot of developers seem to not get MVC right in practice. I have been an iOS consultant for three years and have been given opportunities to work on a variety of projects with approximately two dozen developers from around the world. I've also had the privilege to experience and see how other developers build iOS applications. Sadly, almost 90% of the projects made the similar mistakes of mixing views with controllers, which would result in truly massive view controllers. No jokes here! This mistake will most likely cost applications to have shorter lifecycles.
<h2>Why does Massive View Controller exist?</h2>
It is definitely not difficult to start developing iOS applications. One of the most intelligent IDEs, XCode, will handle almost every computer science philosophy for developers behind the scene. That's also what Apple tends to deliver: everyone can become an iOS application developer. Obviously, people do not necessarily need knowledge in computer science to become iOS developers. It is without a doubt that other developers will be more forgiving towards those without a background in computer science. "They can always learn." It is absolutely right.

The tutorial is another critical cause. Due to the booming mobile application market, there are tons of tutorials out in the internet to help people build certain functionalities, this is awesome and I appreciate it A LOT! However, tutorial writers might think it's JUST for demonstration purposes and thus, see no need to stick with a certain software architecture pattern. I have observed that majority of the demo codes is on the controller part. But, some developers just follow the tutorial blindly. What comes next then? Welcome to the hell of the massive-view-controller world.
<h2>List of MVC in bad practice</h2>
<ul>
	<li>Model describes data structure without ownership of the data</li>
	<li>Controller handles the part of model and view</li>
	<li>View holds nothing; worse if not being separated into a file</li>
</ul>
<h2>Codes comparison</h2>
I will be demonstrating the above three points from a demo application. At the same time, another demo application with same functionalities will show how it's supposed to be in MVC software architecture pattern.

Basically, it's a simple iOS application that owns a table view. Each record represents a remote user. The table view can be used to add or delete users. When you click on one of a record, it will navigate you to another view controller that contains a clickable button and a view. You can tap on/off the button to change the state of this record. Let's rolling in!
<h4>Model describes data structure without ownership of the data</h4>
<blockquote>
<pre style="padding-left:30px;">// In Contacts.swift
class Contact {
    var name: String?
    var url: String?
    var connected: Bool
    init(name: String, url: String) {
        self.name = name
        self.url = url
        self.connected = false
    }
}
</pre>
</blockquote>
The codes above correctly describe the data structure of <em>Contact</em>, but what should I do if I want to add, retrieve and remove multiple <em>Contact</em> from <em>Contacts</em>? This piece normally goes to the controllers in tutorials which violate our rule. Below is my modification:
<blockquote>
<pre style="padding-left:30px;">// In Contacts.swift
class Contact {
    private(set) var name: String?
    private(set) var url: String?
    private(set) var connected: Bool
    
    init(name: String, url: String) {
        self.name = name
        self.url = url
        self.connected = false
    }
    
    func reverseConnected() {
        connected = !connected
    }
}

class Contacts {
    private static let sharedInstance = Contacts()
    private var contacts = [Contact]()
    
    class func countContact() -&gt; Int {
        return sharedInstance.contacts.count
    }
    
    class func addContact(contact: Contact) {
        sharedInstance.contacts.append(contact)
    }
    
    class func getContactFromIndexPath(indexPath: NSIndexPath) -&gt; Contact? {
        if 0 &gt; indexPath.row || indexPath.row &gt; sharedInstance.contacts.count {return nil}
        return sharedInstance.contacts[indexPath.row]
    }
    
    class func removeContactFromIndexPath(indexPath: NSIndexPath) -&gt; Contact? {
        if 0 &gt; indexPath.row || indexPath.row &gt; sharedInstance.contacts.count {return nil}
        let contact = sharedInstance.contacts[indexPath.row]
        sharedInstance.contacts.removeAtIndex(indexPath.row)
        return contact
    }
}
</pre>
</blockquote>
<em>CountContact</em>, <em>addContact</em>, <em>getContactFromIndexPath</em> and <em>removeContactFromIndexPath</em> can be called directly from controllers. This way, controllers do not need to know anything about the model.
<h4>Controller handles the part of model and view</h4>
<blockquote>
<pre>// PublishViewController.swift
var contact: Contact? // it's okay to cache a local variable
@IBOutlet weak var mineView: UIView!
@IBOutlet weak var connectButton: UIButton!

// style logic is held by vc
// which we don't recommend here
private func updateConnectButton() {
    if let contact = contact {
        if contact.connected {
            connectButton.setTitle("DISCONNECT WITH \(contact.name!)", forState: .Normal)
            connectButton.setTitleColor(UIColor.redColor(), forState: .Normal)
            mineView.layer.borderColor = UIColor.redColor().CGColor
        }
        else {
            connectButton.setTitle("CONNECT WITH \(contact.name!)", forState: .Normal)
            connectButton.setTitleColor(UIColor.blueColor(), forState: .Normal)
            mineView.layer.borderColor = UIColor.clearColor().CGColor
        }
    }
}
</pre>
</blockquote>
<blockquote>
<pre>// In MainViewControllerViewController.swift
func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier("MainViewTableViewCellIdentifier")!
    let label = cell.viewWithTag(1000) as! UILabel
    label.textColor = UIColor.grayColor()
    if 0 &gt; indexPath.row || indexPath.row &gt; contacts.count {
        return cell
    }
        
    // contacts is data structure held by the vc
    // which don't recommend here
    if let name = contacts[indexPath.row].name {
        label.text = name
    }
    else {
        label.text = "Unknown"
    }
    return cell
}
</pre>
</blockquote>
The code above looks fine and it's working. What if you have more than ten UI elements to configure in a table view cell? Perhaps you have different kinds of cells? Or perhaps, you will need to change view appearance under some situations? If so, the controller<em> </em>will generate a large piece of codes for sure. How about doing it this way:
<blockquote>
<pre>// PublishView.swift
// this class view property of PublishViewController
@IBOutlet weak var mineView: UIView!
@IBOutlet weak var connectButton: UIButton!
private func updateConnectButton(contact: Contact) {
    if let contact = contact {
        if contact.connected {
            connectButton.setTitle("DISCONNECT WITH \(contact.name!)", forState: .Normal)
            connectButton.setTitleColor(UIColor.redColor(), forState: .Normal)
            mineView.layer.borderColor = UIColor.redColor().CGColor
        }
        else {
            connectButton.setTitle("CONNECT WITH \(contact.name!)", forState: .Normal)
            connectButton.setTitleColor(UIColor.blueColor(), forState: .Normal)
            mineView.layer.borderColor = UIColor.clearColor().CGColor
        }
    }
}
</pre>
</blockquote>
<blockquote>
<pre style="padding-left:30px;">// In MainViewControllerViewController.swift
func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
    let cell = tableView.dequeueReusableCellWithIdentifier(MainViewTableViewCellIdentifier.Normal.rawValue) as! MainViewTableViewCell
    let contact = Contacts.getContactFromIndexPath(indexPath)
    cell.updateCell(contact) // MainViewTableCell holds style logic
    return cell
}
</pre>
</blockquote>
When codes get changed, you need only to concentrate on <em>getContactFromIndexPath,</em> <em>updateCell</em>. As for <em>PublishView</em>, we put the styling logic in the view part so we can focus on this piece of codes when the design is changed.
<h4>View holds nothing; worse if not being separated into a file</h4>
Instead, I will create another file called <em>MainViewTableViewCell.swift</em> to hold styling logic. It's all about the SEPARATION. Here's something we should put it in regarding the cell:
<blockquote>
<pre>// MainViewTableViewCell.swift
class MainViewTableViewCell: UITableViewCell {
    @IBOutlet weak var titleLabel: UILabel!
    override func awakeFromNib() {
        super.awakeFromNib()
        titleLabel.textColor = UIColor.grayColor()
    }
    func updateCell(contact: Contact?) {
        if let contact = contact,
            let name = contact.name {
            titleLabel?.text = name
        }
        else {
            titleLabel?.text = "Unknown"
        }
    }
}
</pre>
</blockquote>
<h2>You make it</h2>
The projects are available to download from the links below so you have a general idea of the differences:
<a href="https://www.dropbox.com/home?preview=MVC-Demo.zip" target="_blank">MVC-Demo</a>
<a href="https://www.dropbox.com/s/uw0r1fr6rqqmx3e/MVC-Demo-Finish.zip?dl=0">MVC-Demo-Finish</a>

That's it. In short, these are two main points I am suggesting developers to achieve:
<ul>
	<li>Clean responsibility of each part and better separation</li>
	<li>Ease of maintainability and testability</li>
	<li>Think before you write and Cheers!</li>
</ul>
Thank you for taking the time to read this! Please let me know your thoughts on this article. Press the like or share buttons if you like it so that others can read it too :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>229</wp:post_id>
  <wp:post_date>2016-03-30 03:00:55</wp:post_date>
  <wp:post_date_gmt>2016-03-30 03:00:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mvc-ios</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817531</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867334</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[what-is-mvc-in-practice]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[mvc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[focushuang]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=255005732&stype=M&topic=6120778186805497856&type=U&a=NVew]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21263265218]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:11867323;s:56:"https://twitter.com/focushuang/status/715012488991879172";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11817520</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11867323</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[xhuang0802]]></wp:comment_author>
    <wp:comment_author_email>xhuang0802@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lucaashuang.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>216.38.134.120</wp:comment_author_IP>
    <wp:comment_date>2016-04-18 03:55:53</wp:comment_date>
    <wp:comment_date_gmt>2016-04-18 03:55:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I got some good comments here from Reddit: https://www.reddit.com/r/iOSProgramming/comments/4f3m3t/what_is_mvc_in_practice/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>90648746</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1460951755</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460951754</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460951754.61684894561767578125;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"xhuang0802";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>OOP + MVC</title>
  <link>https://lucaashuang.wordpress.com/?p=835</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>xhuang0802</dc:creator>
  <guid isPermaLink="false">https://lucaashuang.wordpress.com/?p=835</guid>
  <description/>
  <content:encoded><![CDATA[Have you ever been in a situation when you found so tough to fix a bug, even not being able to address what's the actual problem is except for the causes developers can't control like errors from system and library? Sometimes, you need to fix numerous places which you could have been simplified. Or, it takes a longer time to locate that specific portion of the codes. If so, you probably have some troubles on how you architect and apply a certain design pattern to your project correctly.

You probably have thought about refactoring it. In fact, it's not a bad sign if you have realized before. But, time for developers is always so limited. On the other hand, refactoring is something that can't be done in a day or two. The only way to get rid of this dilemma is to build a great foundation from day one. I have been working on a variety of iOS applications for four years so I am going to use an iOS app as a showcase. Whatever software applications implementing user interfaces on computers could be applied by this fundamental principle combination: OOP+MVC. Actually, the goal is simple: write READABLE, MAINTAINABLE and TESTABLE codes. BTW, I chose MVC pattern just because it's classic. Other software architecture patterns like MVP and MVVM are more effective to implement certain functionalities to some extent.

You may ask: what's the difference between OOP and MVC. This is also the question I asked myself when I wrote this article. From my understanding: MVC pattern helps separate and organize files in a meaningful manner for developing UI applications. It's not incorrect to say MVC pattern is applied on the application level. As for OOP, it's a general programming paradigm in order to describe data and procedure more like objects in real world. I believe this one is not strange, it's why OOP was introduced.This sounds a bit irrelated. Perhaps giving an example is better: <strong>UIButton</strong>. Most likely, you will use a <strong>UIButton</strong> or develop a new button class inherited from <strong>UIButton</strong> in a view component based on MVC pattern. Regarding OOP, let's list it based on its attributes:
<ul>
	<li>Encapsulation: <strong>UIButton</strong> is developed based on OOP principle. Property <strong><em>currentTitle</em></strong> encapsulates the text appearing on the button regardless of state. Another example with visibility is <em><strong>buttonType</strong></em>, it's a read-only property that does not allow to change after initialization.</li>
	<li>Inheritance: <strong>UIButton </strong>inherits from class UIControl therefore, it has the ability to interact with users from the touch screen.</li>
	<li>Polymorphism: <em><strong>layoutIfNeeded </strong></em>will act differently from an instance of <strong>UIButton </strong>and an instance of <strong>UITableView</strong>. However, both of the purposes is to force laying out the view subtree starting at the root.</li>
	<li>Abstraction: <strong>UIButton </strong>conforms <strong>NSCoding</strong> protocol<strong> </strong>perhaps for some internal development.</li>
</ul>
We start seeing a point to differentiate OOP and MVC so far: whether it's applied on the application level. Unfortunately, it's not entirely true. On the application level, OOP can happen anytime and anywhere but it's just hard to aware of. Let's take a look at this <a href="https://www.dropbox.com/s/uw0r1fr6rqqmx3e/MVC-Demo-Finish.zip?dl=0">finished sample app</a> originated from my previous post: <a href="https://lucaashuang.wordpress.com/2016/03/30/mvc-ios/">What is MVC in practice?</a> using the intuitive approach again: listing!

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>835</wp:post_id>
  <wp:post_date>2016-05-08 22:43:39</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
  </channel>
</rss>
